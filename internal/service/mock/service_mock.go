// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	core "github.com/arxdsilva/bravo/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockResolver is a mock of Resolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// AddCurrency mocks base method.
func (m *MockResolver) AddCurrency(ctx context.Context, symbol, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCurrency", ctx, symbol, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCurrency indicates an expected call of AddCurrency.
func (mr *MockResolverMockRecorder) AddCurrency(ctx, symbol, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCurrency", reflect.TypeOf((*MockResolver)(nil).AddCurrency), ctx, symbol, description)
}

// Convert mocks base method.
func (m *MockResolver) Convert(ctx context.Context, conv core.ConversionSVC) (float64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", ctx, conv)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Convert indicates an expected call of Convert.
func (mr *MockResolverMockRecorder) Convert(ctx, conv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockResolver)(nil).Convert), ctx, conv)
}

// CreateRate mocks base method.
func (m *MockResolver) CreateRate(ctx context.Context, from, to string, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRate", ctx, from, to, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRate indicates an expected call of CreateRate.
func (mr *MockResolverMockRecorder) CreateRate(ctx, from, to, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRate", reflect.TypeOf((*MockResolver)(nil).CreateRate), ctx, from, to, rate)
}

// GetCurrencies mocks base method.
func (m *MockResolver) GetCurrencies(ctx context.Context) (core.Currencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencies", ctx)
	ret0, _ := ret[0].(core.Currencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencies indicates an expected call of GetCurrencies.
func (mr *MockResolverMockRecorder) GetCurrencies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencies", reflect.TypeOf((*MockResolver)(nil).GetCurrencies), ctx)
}

// GetCurrency mocks base method.
func (m *MockResolver) GetCurrency(ctx context.Context, symbol string) (core.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", ctx, symbol)
	ret0, _ := ret[0].(core.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockResolverMockRecorder) GetCurrency(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockResolver)(nil).GetCurrency), ctx, symbol)
}

// GetRates mocks base method.
func (m *MockResolver) GetRates(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRates", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRates indicates an expected call of GetRates.
func (mr *MockResolverMockRecorder) GetRates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRates", reflect.TypeOf((*MockResolver)(nil).GetRates), ctx)
}

// RemoveCurrency mocks base method.
func (m *MockResolver) RemoveCurrency(ctx context.Context, symbol string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCurrency", ctx, symbol)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCurrency indicates an expected call of RemoveCurrency.
func (mr *MockResolverMockRecorder) RemoveCurrency(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCurrency", reflect.TypeOf((*MockResolver)(nil).RemoveCurrency), ctx, symbol)
}

// RemoveRate mocks base method.
func (m *MockResolver) RemoveRate(ctx context.Context, from, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRate", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRate indicates an expected call of RemoveRate.
func (mr *MockResolverMockRecorder) RemoveRate(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRate", reflect.TypeOf((*MockResolver)(nil).RemoveRate), ctx, from, to)
}

// UpdateCurrency mocks base method.
func (m *MockResolver) UpdateCurrency(ctx context.Context, symbol, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrency", ctx, symbol, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrency indicates an expected call of UpdateCurrency.
func (mr *MockResolverMockRecorder) UpdateCurrency(ctx, symbol, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrency", reflect.TypeOf((*MockResolver)(nil).UpdateCurrency), ctx, symbol, description)
}

// UpdateRate mocks base method.
func (m *MockResolver) UpdateRate(ctx context.Context, from, to string, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRate", ctx, from, to, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRate indicates an expected call of UpdateRate.
func (mr *MockResolverMockRecorder) UpdateRate(ctx, from, to, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRate", reflect.TypeOf((*MockResolver)(nil).UpdateRate), ctx, from, to, rate)
}

// MockExchanger is a mock of Exchanger interface.
type MockExchanger struct {
	ctrl     *gomock.Controller
	recorder *MockExchangerMockRecorder
}

// MockExchangerMockRecorder is the mock recorder for MockExchanger.
type MockExchangerMockRecorder struct {
	mock *MockExchanger
}

// NewMockExchanger creates a new mock instance.
func NewMockExchanger(ctrl *gomock.Controller) *MockExchanger {
	mock := &MockExchanger{ctrl: ctrl}
	mock.recorder = &MockExchangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchanger) EXPECT() *MockExchangerMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m *MockExchanger) Exchange(ctx context.Context, from, to string, amount float64) (core.ConversionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", ctx, from, to, amount)
	ret0, _ := ret[0].(core.ConversionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockExchangerMockRecorder) Exchange(ctx, from, to, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockExchanger)(nil).Exchange), ctx, from, to, amount)
}

// GetCurrencies mocks base method.
func (m *MockExchanger) GetCurrencies(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencies", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencies indicates an expected call of GetCurrencies.
func (mr *MockExchangerMockRecorder) GetCurrencies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencies", reflect.TypeOf((*MockExchanger)(nil).GetCurrencies), ctx)
}
